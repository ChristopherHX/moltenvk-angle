// Generated by HLC 4.1.2 (HL v4)
#ifndef HL_NATIVES_H
#define HL_NATIVES_H
// Abstract decls
typedef struct _hl_bytes_map hl_bytes_map;
typedef struct _hl_random hl_random;
typedef struct _hl_urho3d_application hl_urho3d_application;
typedef struct _hl_urho3d_color hl_urho3d_color;
typedef struct _hl_urho3d_intvector2 hl_urho3d_intvector2;
typedef struct _hl_urho3d_math_tintvector2 hl_urho3d_math_tintvector2;
typedef struct _hl_urho3d_math_tvector2 hl_urho3d_math_tvector2;
typedef struct _hl_urho3d_math_vector2 hl_urho3d_math_vector2;
typedef struct _hl_urho3d_sprite hl_urho3d_sprite;
typedef struct _hl_urho3d_stringhash hl_urho3d_stringhash;
typedef struct _hl_urho3d_tcolor hl_urho3d_tcolor;
typedef struct _hl_urho3d_texture2d hl_urho3d_texture2d;
typedef struct _hl_urho3d_tstringhash hl_urho3d_tstringhash;
typedef struct _hl_urho3d_tvariant hl_urho3d_tvariant;
typedef struct _hl_urho3d_tvariantmap hl_urho3d_tvariantmap;
typedef struct _hl_urho3d_uielement hl_urho3d_uielement;
typedef struct _hl_urho3d_variant hl_urho3d_variant;
typedef struct _hl_urho3d_variantmap hl_urho3d_variantmap;
typedef struct _urho3d_context urho3d_context;

#include <hl/natives.h>
#include <_std/String.h>

// Natives functions
HL_API void Urho3D__application_subscribe_to_event(hl_urho3d_application*,hl_urho3d_stringhash*,vdynamic*,String);
HL_API hl_urho3d_uielement* Urho3D__cast_sprite_to_uielement(urho3d_context*,hl_urho3d_sprite*);
HL_API hl_urho3d_tvariantmap* Urho3D__core_tvariantmap_create(void);
HL_API hl_urho3d_tvariant* Urho3D__core_tvariantmap_get_value(hl_urho3d_tvariantmap*,hl_urho3d_tstringhash*);
HL_API hl_urho3d_tvariant* Urho3D__core_tvariantmap_set_key_value(hl_urho3d_tvariantmap*,hl_urho3d_tstringhash*,hl_urho3d_tvariant*);
HL_API hl_urho3d_application* Urho3D__create_application(urho3d_context*);
HL_API urho3d_context* Urho3D__create_context(void);
HL_API hl_urho3d_intvector2* Urho3D__create_intvector2(int,int);
HL_API hl_urho3d_sprite* Urho3D__create_sprite(urho3d_context*);
HL_API hl_urho3d_stringhash* Urho3D__create_stringhash(String);
HL_API hl_urho3d_texture2d* Urho3D__create_texture2d(urho3d_context*,String);
HL_API hl_urho3d_tvariant* Urho3D__create_tvariant(void);
HL_API hl_urho3d_uielement* Urho3D__create_uielement(urho3d_context*);
HL_API hl_urho3d_variant* Urho3D__create_variant(void);
HL_API hl_urho3d_variantmap* Urho3D__create_variantmap(void);
HL_API vbyte* Urho3D__get_stringhash_string(hl_urho3d_stringhash*);
HL_API vbyte* Urho3D__get_texture2d_get_name(hl_urho3d_texture2d*);
HL_API hl_urho3d_tvariant* Urho3D__get_value(hl_urho3d_variantmap*,hl_urho3d_tstringhash*);
HL_API int Urho3D__graphics_get_height(urho3d_context*);
HL_API int Urho3D__graphics_get_width(urho3d_context*);
HL_API int Urho3D__intvector2_get_x(hl_urho3d_intvector2*);
HL_API int Urho3D__intvector2_get_y(hl_urho3d_intvector2*);
HL_API int Urho3D__intvector2_set_x(hl_urho3d_intvector2*,int);
HL_API int Urho3D__intvector2_set_y(hl_urho3d_intvector2*,int);
HL_API hl_urho3d_color* Urho3D__math_create_color(float,float,float,float);
HL_API hl_urho3d_tcolor* Urho3D__math_tcolor_cast_from_color(hl_urho3d_color*);
HL_API hl_urho3d_color* Urho3D__math_tcolor_cast_to_color(hl_urho3d_tcolor*);
HL_API hl_urho3d_tcolor* Urho3D__math_tcolor_create(float,float,float,float);
HL_API hl_urho3d_math_tintvector2* Urho3D__math_tintvector2_cast_from_intvector2(hl_urho3d_intvector2*);
HL_API hl_urho3d_intvector2* Urho3D__math_tintvector2_cast_to_intvector2(hl_urho3d_math_tintvector2*);
HL_API hl_urho3d_math_tintvector2* Urho3D__math_tintvector2_create(int,int);
HL_API int Urho3D__math_tintvector2_get_x(hl_urho3d_math_tintvector2*);
HL_API int Urho3D__math_tintvector2_get_y(hl_urho3d_math_tintvector2*);
HL_API int Urho3D__math_tintvector2_set_x(hl_urho3d_math_tintvector2*,int);
HL_API int Urho3D__math_tintvector2_set_y(hl_urho3d_math_tintvector2*,int);
HL_API hl_urho3d_tstringhash* Urho3D__math_tstringhash_cast_from_stringhash(hl_urho3d_stringhash*);
HL_API hl_urho3d_stringhash* Urho3D__math_tstringhash_cast_to_stringhash(hl_urho3d_tstringhash*);
HL_API hl_urho3d_tstringhash* Urho3D__math_tstringhash_create(String);
HL_API vbyte* Urho3D__math_tstringhash_get_string(hl_urho3d_tstringhash*);
HL_API hl_urho3d_tvariant* Urho3D__math_tvariant_cast_from_variant(hl_urho3d_variant*);
HL_API hl_urho3d_variant* Urho3D__math_tvariant_cast_to_variant(hl_urho3d_tvariant*);
HL_API hl_urho3d_math_tvector2* Urho3D__math_tvector2_cast_from_vector2(hl_urho3d_math_vector2*);
HL_API hl_urho3d_math_vector2* Urho3D__math_tvector2_cast_to_vector2(hl_urho3d_math_tvector2*);
HL_API hl_urho3d_math_tvector2* Urho3D__math_tvector2_create(float,float);
HL_API float Urho3D__math_tvector2_get_x(hl_urho3d_math_tvector2*);
HL_API float Urho3D__math_tvector2_get_y(hl_urho3d_math_tvector2*);
HL_API float Urho3D__math_tvector2_set_x(hl_urho3d_math_tvector2*,float);
HL_API float Urho3D__math_tvector2_set_y(hl_urho3d_math_tvector2*,float);
HL_API float Urho3D__math_vector2_angle(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*);
HL_API hl_urho3d_math_vector2* Urho3D__math_vector2_create(float,float);
HL_API float Urho3D__math_vector2_dot_product(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*);
HL_API float Urho3D__math_vector2_dot_product(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*);
HL_API bool Urho3D__math_vector2_equals(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*);
HL_API float Urho3D__math_vector2_get_x(hl_urho3d_math_vector2*);
HL_API float Urho3D__math_vector2_get_y(hl_urho3d_math_vector2*);
HL_API bool Urho3D__math_vector2_is_inf(hl_urho3d_math_vector2*);
HL_API bool Urho3D__math_vector2_is_nan(hl_urho3d_math_vector2*);
HL_API float Urho3D__math_vector2_length(hl_urho3d_math_vector2*);
HL_API float Urho3D__math_vector2_length_squared(hl_urho3d_math_vector2*);
HL_API hl_urho3d_math_vector2* Urho3D__math_vector2_lerp(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*,float);
HL_API void Urho3D__math_vector2_normalize(hl_urho3d_math_vector2*);
HL_API hl_urho3d_math_vector2* Urho3D__math_vector2_normalized(hl_urho3d_math_vector2*);
HL_API hl_urho3d_math_vector2* Urho3D__math_vector2_normalized_or_default(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*,float);
HL_API float Urho3D__math_vector2_project_onto_axis(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*);
HL_API hl_urho3d_math_vector2* Urho3D__math_vector2_renormalized(hl_urho3d_math_vector2*,float,float,hl_urho3d_math_vector2*,float);
HL_API float Urho3D__math_vector2_set_x(hl_urho3d_math_vector2*,float);
HL_API float Urho3D__math_vector2_set_y(hl_urho3d_math_vector2*,float);
HL_API void Urho3D__run_application(hl_urho3d_application*);
HL_API hl_urho3d_tvariant* Urho3D__set_key_value(hl_urho3d_variantmap*,hl_urho3d_tstringhash*,hl_urho3d_tvariant*);
HL_API void Urho3D__setup_closure_application(hl_urho3d_application*,vclosure*);
HL_API int Urho3D__sprite_get_blend_mode(urho3d_context*,hl_urho3d_sprite*);
HL_API hl_urho3d_tcolor* Urho3D__sprite_get_color(urho3d_context*,hl_urho3d_sprite*);
HL_API hl_urho3d_math_tintvector2* Urho3D__sprite_get_hotspot(urho3d_context*,hl_urho3d_sprite*);
HL_API hl_urho3d_math_tvector2* Urho3D__sprite_get_position(urho3d_context*,hl_urho3d_sprite*);
HL_API float Urho3D__sprite_get_rotation(urho3d_context*,hl_urho3d_sprite*);
HL_API hl_urho3d_math_tvector2* Urho3D__sprite_get_scale(urho3d_context*,hl_urho3d_sprite*);
HL_API hl_urho3d_math_tintvector2* Urho3D__sprite_get_size(urho3d_context*,hl_urho3d_sprite*);
HL_API hl_urho3d_texture2d* Urho3D__sprite_get_texture(urho3d_context*,hl_urho3d_sprite*);
HL_API hl_urho3d_tvariantmap* Urho3D__sprite_get_vars(urho3d_context*,hl_urho3d_sprite*);
HL_API int Urho3D__sprite_set_blend_mode(urho3d_context*,hl_urho3d_sprite*,int);
HL_API hl_urho3d_tcolor* Urho3D__sprite_set_color(urho3d_context*,hl_urho3d_sprite*,hl_urho3d_tcolor*);
HL_API hl_urho3d_math_tintvector2* Urho3D__sprite_set_hotspot(urho3d_context*,hl_urho3d_sprite*,hl_urho3d_math_tintvector2*);
HL_API hl_urho3d_math_tvector2* Urho3D__sprite_set_position(urho3d_context*,hl_urho3d_sprite*,hl_urho3d_math_tvector2*);
HL_API float Urho3D__sprite_set_rotation(urho3d_context*,hl_urho3d_sprite*,float);
HL_API hl_urho3d_math_tvector2* Urho3D__sprite_set_scale(urho3d_context*,hl_urho3d_sprite*,hl_urho3d_math_tvector2*);
HL_API hl_urho3d_math_tintvector2* Urho3D__sprite_set_size(urho3d_context*,hl_urho3d_sprite*,hl_urho3d_math_tintvector2*);
HL_API hl_urho3d_texture2d* Urho3D__sprite_set_texture(urho3d_context*,hl_urho3d_sprite*,hl_urho3d_texture2d*);
HL_API void Urho3D__start_closure_application(hl_urho3d_application*,vclosure*);
HL_API void Urho3D__stop_closure_application(hl_urho3d_application*,vclosure*);
HL_API float Urho3D__tvariant_get_float(hl_urho3d_tvariant*);
HL_API int Urho3D__tvariant_get_int(hl_urho3d_tvariant*);
HL_API hl_urho3d_math_tintvector2* Urho3D__tvariant_get_tintvector2(hl_urho3d_tvariant*);
HL_API hl_urho3d_math_tvector2* Urho3D__tvariant_get_tvector2(hl_urho3d_tvariant*);
HL_API hl_urho3d_math_vector2* Urho3D__tvariant_get_vector2(hl_urho3d_tvariant*);
HL_API void Urho3D__tvariant_set_float(hl_urho3d_tvariant*,float);
HL_API void Urho3D__tvariant_set_int(hl_urho3d_tvariant*,int);
HL_API void Urho3D__tvariant_set_tintvector2(hl_urho3d_tvariant*,hl_urho3d_math_tintvector2*);
HL_API void Urho3D__tvariant_set_tvector2(hl_urho3d_tvariant*,hl_urho3d_math_tvector2*);
HL_API void Urho3D__tvariant_set_vector2(hl_urho3d_tvariant*,hl_urho3d_math_vector2*);
HL_API hl_urho3d_uielement* Urho3D__ui_get_root(urho3d_context*);
HL_API void Urho3D__ui_uielement_addchild(urho3d_context*,hl_urho3d_uielement*,hl_urho3d_uielement*);
HL_API float Urho3D__variant_get_float(hl_urho3d_variant*);
HL_API int Urho3D__variant_get_int(hl_urho3d_variant*);
HL_API hl_urho3d_math_tintvector2* Urho3D__variant_get_tintvector2(hl_urho3d_variant*);
HL_API hl_urho3d_math_tvector2* Urho3D__variant_get_tvector2(hl_urho3d_variant*);
HL_API hl_urho3d_math_vector2* Urho3D__variant_get_vector2(hl_urho3d_variant*);
HL_API void Urho3D__variant_set_float(hl_urho3d_variant*,float);
HL_API void Urho3D__variant_set_int(hl_urho3d_variant*,int);
HL_API void Urho3D__variant_set_tintvector2(hl_urho3d_variant*,hl_urho3d_math_tintvector2*);
HL_API void Urho3D__variant_set_tvector2(hl_urho3d_variant*,hl_urho3d_math_tvector2*);
HL_API void Urho3D__variant_set_vector2(hl_urho3d_variant*,hl_urho3d_math_vector2*);
HL_API varray* hl_alloc_array(hl_type*,int);
HL_API vbyte* hl_alloc_bytes(int);
HL_API vdynamic* hl_alloc_obj(hl_type*);
HL_API void hl_array_blit(varray*,int,varray*,int,int);
HL_API hl_type* hl_array_type(varray*);
HL_API void hl_breakpoint(void);
HL_API void hl_bsort_f64(vbyte*,int,int,vclosure*);
HL_API void hl_bsort_i32(vbyte*,int,int,vclosure*);
HL_API void hl_bytes_blit(vbyte*,int,vbyte*,int,int);
HL_API int hl_bytes_compare(vbyte*,int,vbyte*,int,int);
HL_API int hl_bytes_compare16(vbyte*,vbyte*,int);
HL_API void hl_bytes_fill(vbyte*,int,int,int);
HL_API int hl_bytes_find(vbyte*,int,int,vbyte*,int,int);
HL_API vdynamic* hl_call_method(vdynamic*,varray*);
HL_API int hl_date_new(int,int,int,int,int,int);
HL_API vbyte* hl_date_to_string(int,int*);
HL_API varray* hl_exception_stack(void);
HL_API vbyte* hl_ftos(double,int*);
HL_API vdynamic* hl_get_closure_value(vdynamic*);
HL_API vdynamic* hl_get_virtual_value(vdynamic*);
HL_API hl_bytes_map* hl_hballoc(void);
HL_API void hl_hbset(hl_bytes_map*,vbyte*,vdynamic*);
HL_API vbyte* hl_itos(int,int*);
HL_API vdynamic* hl_make_closure(vdynamic*,vdynamic*);
HL_API vdynamic* hl_make_var_args(vclosure*);
HL_API vdynamic* hl_no_closure(vdynamic*);
HL_API bool hl_obj_delete_field(vdynamic*,int);
HL_API vdynamic* hl_obj_get_field(vdynamic*,int);
HL_API bool hl_obj_has_field(vdynamic*,int);
HL_API void hl_obj_set_field(vdynamic*,int,vdynamic*);
HL_API int hl_ptr_compare(vdynamic*,vdynamic*);
HL_API hl_random* hl_rnd_init_system(void);
HL_API int hl_rnd_int(hl_random*);
HL_API void hl_set_error_handler(vclosure*);
HL_API bool hl_sys_is64(void);
HL_API void hl_sys_print(vbyte*);
HL_API bool hl_sys_utf8_path(void);
HL_API varray* hl_type_enum_fields(hl_type*);
HL_API varray* hl_type_enum_values(hl_type*);
HL_API vbyte* hl_type_name(hl_type*);
HL_API bool hl_type_safe_cast(hl_type*,hl_type*);
HL_API bool hl_type_set_global(hl_type*,vdynamic*);
HL_API vbyte* hl_ucs2_lower(vbyte*,int,int);
HL_API vbyte* hl_ucs2_upper(vbyte*,int,int);
HL_API int hl_ucs2length(vbyte*,int);
HL_API vbyte* hl_utf16_to_utf8(vbyte*,int,int*);
HL_API vbyte* hl_utf8_to_utf16(vbyte*,int,int*);
HL_API vdynamic* hl_value_cast(vdynamic*,hl_type*);
HL_API vbyte* hl_value_to_string(vdynamic*,int*);
#endif

