// Generated by HLC 4.1.2 (HL v4)
#ifndef HL_NATIVES_H
#define HL_NATIVES_H
// Abstract decls
typedef struct _hl_bytes_map hl_bytes_map;
typedef struct _hl_random hl_random;
typedef struct _hl_urho3d_application hl_urho3d_application;
typedef struct _hl_urho3d_color hl_urho3d_color;
typedef struct _hl_urho3d_graphics_camera hl_urho3d_graphics_camera;
typedef struct _hl_urho3d_graphics_light hl_urho3d_graphics_light;
typedef struct _hl_urho3d_graphics_material hl_urho3d_graphics_material;
typedef struct _hl_urho3d_graphics_model hl_urho3d_graphics_model;
typedef struct _hl_urho3d_graphics_staticmodel hl_urho3d_graphics_staticmodel;
typedef struct _hl_urho3d_graphics_viewport hl_urho3d_graphics_viewport;
typedef struct _hl_urho3d_graphics_zone hl_urho3d_graphics_zone;
typedef struct _hl_urho3d_math_boundingbox hl_urho3d_math_boundingbox;
typedef struct _hl_urho3d_math_quaternion hl_urho3d_math_quaternion;
typedef struct _hl_urho3d_math_vector2 hl_urho3d_math_vector2;
typedef struct _hl_urho3d_math_vector3 hl_urho3d_math_vector3;
typedef struct _hl_urho3d_scene_component hl_urho3d_scene_component;
typedef struct _hl_urho3d_scene_logic_component hl_urho3d_scene_logic_component;
typedef struct _hl_urho3d_scene_node hl_urho3d_scene_node;
typedef struct _hl_urho3d_scene_scene hl_urho3d_scene_scene;
typedef struct _hl_urho3d_stringhash hl_urho3d_stringhash;
typedef struct _hl_urho3d_variant hl_urho3d_variant;
typedef struct _hl_urho3d_variantmap hl_urho3d_variantmap;
typedef struct _urho3d_context urho3d_context;

#include <hl/natives.h>
#include <_std/String.h>

// Natives functions
HL_API void Urho3D__application_subscribe_to_event(hl_urho3d_application*,hl_urho3d_stringhash*,vdynamic*,String);
HL_API hl_urho3d_application* Urho3D__create_application(urho3d_context*);
HL_API urho3d_context* Urho3D__create_context(void);
HL_API hl_urho3d_stringhash* Urho3D__create_stringhash(String);
HL_API hl_urho3d_variant* Urho3D__create_variant(void);
HL_API hl_urho3d_variantmap* Urho3D__create_variantmap(void);
HL_API vbyte* Urho3D__get_stringhash_string(hl_urho3d_stringhash*);
HL_API hl_urho3d_variant* Urho3D__get_value(hl_urho3d_variantmap*,hl_urho3d_stringhash*);
HL_API hl_urho3d_graphics_camera* Urho3D__graphics_camera_cast_from_component(urho3d_context*,hl_urho3d_scene_component*);
HL_API hl_urho3d_scene_component* Urho3D__graphics_camera_cast_to_component(urho3d_context*,hl_urho3d_graphics_camera*);
HL_API hl_urho3d_graphics_camera* Urho3D__graphics_camera_create(urho3d_context*);
HL_API float Urho3D__graphics_camera_get_far_clip(urho3d_context*,hl_urho3d_graphics_camera*);
HL_API void Urho3D__graphics_camera_set_far_clip(urho3d_context*,hl_urho3d_graphics_camera*,float);
HL_API int Urho3D__graphics_get_height(urho3d_context*);
HL_API int Urho3D__graphics_get_width(urho3d_context*);
HL_API hl_urho3d_graphics_light* Urho3D__graphics_light_cast_from_component(urho3d_context*,hl_urho3d_scene_component*);
HL_API hl_urho3d_scene_component* Urho3D__graphics_light_cast_to_component(urho3d_context*,hl_urho3d_graphics_light*);
HL_API hl_urho3d_graphics_light* Urho3D__graphics_light_create(urho3d_context*);
HL_API int Urho3D__graphics_light_get_light_type(urho3d_context*,hl_urho3d_graphics_light*);
HL_API float Urho3D__graphics_light_get_range(urho3d_context*,hl_urho3d_graphics_light*);
HL_API void Urho3D__graphics_light_set_light_type(urho3d_context*,hl_urho3d_graphics_light*,int);
HL_API void Urho3D__graphics_light_set_range(urho3d_context*,hl_urho3d_graphics_light*,float);
HL_API hl_urho3d_graphics_material* Urho3D__graphics_material_create(urho3d_context*,String);
HL_API hl_urho3d_graphics_model* Urho3D__graphics_model_create(urho3d_context*,String);
HL_API void Urho3D__graphics_renderer_set_viewport(urho3d_context*,int,hl_urho3d_graphics_viewport*);
HL_API hl_urho3d_graphics_staticmodel* Urho3D__graphics_staticmodel_cast_from_component(urho3d_context*,hl_urho3d_scene_component*);
HL_API hl_urho3d_scene_component* Urho3D__graphics_staticmodel_cast_to_component(urho3d_context*,hl_urho3d_graphics_staticmodel*);
HL_API hl_urho3d_graphics_staticmodel* Urho3D__graphics_staticmodel_create(urho3d_context*);
HL_API hl_urho3d_graphics_material* Urho3D__graphics_staticmodel_get_material(urho3d_context*,hl_urho3d_graphics_staticmodel*);
HL_API hl_urho3d_graphics_model* Urho3D__graphics_staticmodel_get_model(urho3d_context*,hl_urho3d_graphics_staticmodel*);
HL_API void Urho3D__graphics_staticmodel_set_material(urho3d_context*,hl_urho3d_graphics_staticmodel*,hl_urho3d_graphics_material*);
HL_API void Urho3D__graphics_staticmodel_set_model(urho3d_context*,hl_urho3d_graphics_staticmodel*,hl_urho3d_graphics_model*);
HL_API hl_urho3d_graphics_viewport* Urho3D__graphics_viewport_create(urho3d_context*,hl_urho3d_scene_scene*,hl_urho3d_graphics_camera*);
HL_API hl_urho3d_graphics_zone* Urho3D__graphics_zone_cast_from_component(urho3d_context*,hl_urho3d_scene_component*);
HL_API hl_urho3d_scene_component* Urho3D__graphics_zone_cast_to_component(urho3d_context*,hl_urho3d_graphics_zone*);
HL_API hl_urho3d_graphics_zone* Urho3D__graphics_zone_create(urho3d_context*);
HL_API hl_urho3d_color* Urho3D__graphics_zone_get_ambient_color(urho3d_context*,hl_urho3d_graphics_zone*);
HL_API hl_urho3d_math_boundingbox* Urho3D__graphics_zone_get_boundingbox(urho3d_context*,hl_urho3d_graphics_zone*);
HL_API hl_urho3d_color* Urho3D__graphics_zone_get_fog_color(urho3d_context*,hl_urho3d_graphics_zone*);
HL_API float Urho3D__graphics_zone_get_fog_end(urho3d_context*,hl_urho3d_graphics_zone*);
HL_API float Urho3D__graphics_zone_get_fog_start(urho3d_context*,hl_urho3d_graphics_zone*);
HL_API hl_urho3d_color* Urho3D__graphics_zone_set_ambient_color(urho3d_context*,hl_urho3d_graphics_zone*,hl_urho3d_color*);
HL_API hl_urho3d_math_boundingbox* Urho3D__graphics_zone_set_boundingbox(urho3d_context*,hl_urho3d_graphics_zone*,hl_urho3d_math_boundingbox*);
HL_API hl_urho3d_color* Urho3D__graphics_zone_set_fog_color(urho3d_context*,hl_urho3d_graphics_zone*,hl_urho3d_color*);
HL_API float Urho3D__graphics_zone_set_fog_end(urho3d_context*,hl_urho3d_graphics_zone*,float);
HL_API float Urho3D__graphics_zone_set_fog_start(urho3d_context*,hl_urho3d_graphics_zone*,float);
HL_API hl_urho3d_math_boundingbox* Urho3D__math_boundingbox_create_ff(float,float);
HL_API hl_urho3d_math_boundingbox* Urho3D__math_boundingbox_create_v3_v3(hl_urho3d_math_vector3*,hl_urho3d_math_vector3*);
HL_API hl_urho3d_color* Urho3D__math_create_color(float,float,float,float);
HL_API hl_urho3d_math_quaternion* Urho3D__math_quaternion_create(float,float,float);
HL_API void Urho3D__math_quaternion_set_euler_angles(hl_urho3d_math_quaternion*,float,float,float);
HL_API float Urho3D__math_vector2_angle(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*);
HL_API hl_urho3d_math_vector2* Urho3D__math_vector2_create(float,float);
HL_API float Urho3D__math_vector2_dot_product(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*);
HL_API float Urho3D__math_vector2_dot_product(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*);
HL_API bool Urho3D__math_vector2_equals(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*);
HL_API float Urho3D__math_vector2_get_x(hl_urho3d_math_vector2*);
HL_API float Urho3D__math_vector2_get_y(hl_urho3d_math_vector2*);
HL_API bool Urho3D__math_vector2_is_inf(hl_urho3d_math_vector2*);
HL_API bool Urho3D__math_vector2_is_nan(hl_urho3d_math_vector2*);
HL_API float Urho3D__math_vector2_length(hl_urho3d_math_vector2*);
HL_API float Urho3D__math_vector2_length_squared(hl_urho3d_math_vector2*);
HL_API hl_urho3d_math_vector2* Urho3D__math_vector2_lerp(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*,float);
HL_API void Urho3D__math_vector2_normalize(hl_urho3d_math_vector2*);
HL_API hl_urho3d_math_vector2* Urho3D__math_vector2_normalized(hl_urho3d_math_vector2*);
HL_API hl_urho3d_math_vector2* Urho3D__math_vector2_normalized_or_default(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*,float);
HL_API float Urho3D__math_vector2_project_onto_axis(hl_urho3d_math_vector2*,hl_urho3d_math_vector2*);
HL_API hl_urho3d_math_vector2* Urho3D__math_vector2_renormalized(hl_urho3d_math_vector2*,float,float,hl_urho3d_math_vector2*,float);
HL_API float Urho3D__math_vector2_set_x(hl_urho3d_math_vector2*,float);
HL_API float Urho3D__math_vector2_set_y(hl_urho3d_math_vector2*,float);
HL_API float Urho3D__math_vector3_angle(hl_urho3d_math_vector3*,hl_urho3d_math_vector3*);
HL_API hl_urho3d_math_vector3* Urho3D__math_vector3_create(float,float,float);
HL_API float Urho3D__math_vector3_dot_product(hl_urho3d_math_vector3*,hl_urho3d_math_vector3*);
HL_API float Urho3D__math_vector3_dot_product(hl_urho3d_math_vector3*,hl_urho3d_math_vector3*);
HL_API bool Urho3D__math_vector3_equals(hl_urho3d_math_vector3*,hl_urho3d_math_vector3*);
HL_API float Urho3D__math_vector3_get_x(hl_urho3d_math_vector3*);
HL_API float Urho3D__math_vector3_get_y(hl_urho3d_math_vector3*);
HL_API float Urho3D__math_vector3_get_z(hl_urho3d_math_vector3*);
HL_API bool Urho3D__math_vector3_is_inf(hl_urho3d_math_vector3*);
HL_API bool Urho3D__math_vector3_is_nan(hl_urho3d_math_vector3*);
HL_API float Urho3D__math_vector3_length(hl_urho3d_math_vector3*);
HL_API float Urho3D__math_vector3_length_squared(hl_urho3d_math_vector3*);
HL_API hl_urho3d_math_vector3* Urho3D__math_vector3_lerp(hl_urho3d_math_vector3*,hl_urho3d_math_vector3*,float);
HL_API void Urho3D__math_vector3_normalize(hl_urho3d_math_vector3*);
HL_API hl_urho3d_math_vector3* Urho3D__math_vector3_normalized(hl_urho3d_math_vector3*);
HL_API hl_urho3d_math_vector3* Urho3D__math_vector3_normalized_or_default(hl_urho3d_math_vector3*,hl_urho3d_math_vector3*,float);
HL_API float Urho3D__math_vector3_project_onto_axis(hl_urho3d_math_vector3*,hl_urho3d_math_vector3*);
HL_API hl_urho3d_math_vector3* Urho3D__math_vector3_renormalized(hl_urho3d_math_vector3*,float,float,hl_urho3d_math_vector3*,float);
HL_API float Urho3D__math_vector3_set_x(hl_urho3d_math_vector3*,float);
HL_API float Urho3D__math_vector3_set_y(hl_urho3d_math_vector3*,float);
HL_API float Urho3D__math_vector3_set_z(hl_urho3d_math_vector3*,float);
HL_API void Urho3D__run_application(hl_urho3d_application*);
HL_API hl_urho3d_scene_component* Urho3D__scene_component_create(urho3d_context*);
HL_API hl_urho3d_scene_node* Urho3D__scene_component_get_node(urho3d_context*,hl_urho3d_scene_component*);
HL_API hl_urho3d_scene_logic_component* Urho3D__scene_logic_component_cast_from_component(urho3d_context*,hl_urho3d_scene_component*);
HL_API hl_urho3d_scene_component* Urho3D__scene_logic_component_cast_to_component(urho3d_context*,hl_urho3d_scene_logic_component*);
HL_API hl_urho3d_scene_logic_component* Urho3D__scene_logic_component_create(urho3d_context*,vdynamic*);
HL_API void Urho3D__scene_node_add_component(urho3d_context*,hl_urho3d_scene_node*,hl_urho3d_scene_component*,int,int);
HL_API hl_urho3d_scene_node* Urho3D__scene_node_create(urho3d_context*);
HL_API hl_urho3d_scene_node* Urho3D__scene_node_create_child(urho3d_context*,hl_urho3d_scene_node*,String,int,int,bool);
HL_API hl_urho3d_scene_component* Urho3D__scene_node_create_component(urho3d_context*,hl_urho3d_scene_node*,String,int,int);
HL_API hl_urho3d_scene_component* Urho3D__scene_node_get_component(urho3d_context*,hl_urho3d_scene_node*,String);
HL_API hl_urho3d_math_vector3* Urho3D__scene_node_get_position(urho3d_context*,hl_urho3d_scene_node*);
HL_API hl_urho3d_math_quaternion* Urho3D__scene_node_get_rotation(urho3d_context*,hl_urho3d_scene_node*);
HL_API void Urho3D__scene_node_rotate(urho3d_context*,hl_urho3d_scene_node*,hl_urho3d_math_quaternion*,int);
HL_API void Urho3D__scene_node_rotate_euler(urho3d_context*,hl_urho3d_scene_node*,float,float,float,int);
HL_API void Urho3D__scene_node_set_position(urho3d_context*,hl_urho3d_scene_node*,hl_urho3d_math_vector3*);
HL_API void Urho3D__scene_node_set_rotation(urho3d_context*,hl_urho3d_scene_node*,hl_urho3d_math_quaternion*);
HL_API hl_urho3d_scene_node* Urho3D__scene_scene_cast_to_node(urho3d_context*,hl_urho3d_scene_scene*);
HL_API hl_urho3d_scene_scene* Urho3D__scene_scene_create(urho3d_context*);
HL_API hl_urho3d_variant* Urho3D__set_key_value(hl_urho3d_variantmap*,hl_urho3d_stringhash*,hl_urho3d_variant*);
HL_API void Urho3D__setup_closure_application(hl_urho3d_application*,vclosure*);
HL_API void Urho3D__start_closure_application(hl_urho3d_application*,vclosure*);
HL_API void Urho3D__stop_closure_application(hl_urho3d_application*,vclosure*);
HL_API float Urho3D__variant_get_float(hl_urho3d_variant*);
HL_API int Urho3D__variant_get_int(hl_urho3d_variant*);
HL_API void Urho3D__variant_get_vector2(hl_urho3d_variant*,hl_urho3d_math_vector2*);
HL_API void Urho3D__variant_set_float(hl_urho3d_variant*,float);
HL_API void Urho3D__variant_set_int(hl_urho3d_variant*,int);
HL_API void Urho3D__variant_set_vector2(hl_urho3d_variant*,hl_urho3d_math_vector2*);
HL_API varray* hl_alloc_array(hl_type*,int);
HL_API vbyte* hl_alloc_bytes(int);
HL_API vdynamic* hl_alloc_obj(hl_type*);
HL_API void hl_array_blit(varray*,int,varray*,int,int);
HL_API hl_type* hl_array_type(varray*);
HL_API void hl_breakpoint(void);
HL_API void hl_bsort_f64(vbyte*,int,int,vclosure*);
HL_API void hl_bsort_i32(vbyte*,int,int,vclosure*);
HL_API void hl_bytes_blit(vbyte*,int,vbyte*,int,int);
HL_API int hl_bytes_compare(vbyte*,int,vbyte*,int,int);
HL_API int hl_bytes_compare16(vbyte*,vbyte*,int);
HL_API void hl_bytes_fill(vbyte*,int,int,int);
HL_API int hl_bytes_find(vbyte*,int,int,vbyte*,int,int);
HL_API vdynamic* hl_call_method(vdynamic*,varray*);
HL_API int hl_date_new(int,int,int,int,int,int);
HL_API vbyte* hl_date_to_string(int,int*);
HL_API varray* hl_exception_stack(void);
HL_API vdynamic* hl_get_closure_value(vdynamic*);
HL_API vdynamic* hl_get_virtual_value(vdynamic*);
HL_API hl_bytes_map* hl_hballoc(void);
HL_API void hl_hbset(hl_bytes_map*,vbyte*,vdynamic*);
HL_API vbyte* hl_itos(int,int*);
HL_API vdynamic* hl_make_closure(vdynamic*,vdynamic*);
HL_API vdynamic* hl_make_var_args(vclosure*);
HL_API vdynamic* hl_no_closure(vdynamic*);
HL_API bool hl_obj_delete_field(vdynamic*,int);
HL_API vdynamic* hl_obj_get_field(vdynamic*,int);
HL_API bool hl_obj_has_field(vdynamic*,int);
HL_API void hl_obj_set_field(vdynamic*,int,vdynamic*);
HL_API int hl_ptr_compare(vdynamic*,vdynamic*);
HL_API hl_random* hl_rnd_init_system(void);
HL_API int hl_rnd_int(hl_random*);
HL_API void hl_set_error_handler(vclosure*);
HL_API bool hl_sys_is64(void);
HL_API void hl_sys_print(vbyte*);
HL_API bool hl_sys_utf8_path(void);
HL_API varray* hl_type_enum_fields(hl_type*);
HL_API varray* hl_type_enum_values(hl_type*);
HL_API vbyte* hl_type_name(hl_type*);
HL_API bool hl_type_safe_cast(hl_type*,hl_type*);
HL_API bool hl_type_set_global(hl_type*,vdynamic*);
HL_API vbyte* hl_ucs2_lower(vbyte*,int,int);
HL_API vbyte* hl_ucs2_upper(vbyte*,int,int);
HL_API int hl_ucs2length(vbyte*,int);
HL_API vbyte* hl_utf16_to_utf8(vbyte*,int,int*);
HL_API vbyte* hl_utf8_to_utf16(vbyte*,int,int*);
HL_API vdynamic* hl_value_cast(vdynamic*,hl_type*);
HL_API vbyte* hl_value_to_string(vdynamic*,int*);
#endif

